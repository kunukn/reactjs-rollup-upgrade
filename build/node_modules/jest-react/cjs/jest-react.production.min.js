/** @license React vundefined
 * jest-react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var getOwnPropertySymbols = Object.getOwnPropertySymbols,
  hasOwnProperty = Object.prototype.hasOwnProperty,
  propIsEnumerable = Object.prototype.propertyIsEnumerable,
  objectAssign = (function() {
    try {
      if (!Object.assign) return !1;
      var test1 = new String("abc");
      test1[5] = "de";
      if ("5" === Object.getOwnPropertyNames(test1)[0]) return !1;
      var test2 = {};
      for (test1 = 0; 10 > test1; test1++)
        test2["_" + String.fromCharCode(test1)] = test1;
      if (
        "0123456789" !==
        Object.getOwnPropertyNames(test2)
          .map(function(n) {
            return test2[n];
          })
          .join("")
      )
        return !1;
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      return "abcdefghijklmnopqrst" !==
        Object.keys(Object.assign({}, test3)).join("")
        ? !1
        : !0;
    } catch (err) {
      return !1;
    }
  })()
    ? Object.assign
    : function(target, source) {
        if (null === target || void 0 === target)
          throw new TypeError(
            "Object.assign cannot be called with null or undefined"
          );
        var to = Object(target);
        for (var symbols, s = 1; s < arguments.length; s++) {
          var from = Object(arguments[s]);
          for (var key in from)
            hasOwnProperty.call(from, key) && (to[key] = from[key]);
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++)
              propIsEnumerable.call(from, symbols[i]) &&
                (to[symbols[i]] = from[symbols[i]]);
          }
        }
        return to;
      };
function ReactErrorProd(error) {
  for (
    var code = error.message,
      url = "https://reactjs.org/docs/error-decoder.html?invariant=" + code,
      i = 1;
    i < arguments.length;
    i++
  )
    url += "&args[]=" + encodeURIComponent(arguments[i]);
  error.message =
    "Minified React error #" +
    code +
    "; visit " +
    url +
    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ";
  return error;
}
var hasSymbol = "function" === typeof Symbol && Symbol.for,
  REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103,
  REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
function captureAssertion(fn) {
  try {
    fn();
  } catch (error) {
    return {
      pass: !1,
      message: function() {
        return error.message;
      }
    };
  }
  return { pass: !0 };
}
function jsonChildToJSXChild(jsonChild) {
  if (null === jsonChild || "string" === typeof jsonChild) return jsonChild;
  var jsxChildren = jsonChildrenToJSXChildren(jsonChild.children);
  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type: jsonChild.type,
    key: null,
    ref: null,
    props:
      null === jsxChildren
        ? jsonChild.props
        : objectAssign({}, jsonChild.props, { children: jsxChildren }),
    _owner: null,
    _store: void 0
  };
}
function jsonChildrenToJSXChildren(jsonChildren) {
  if (null !== jsonChildren) {
    if (1 === jsonChildren.length) return jsonChildToJSXChild(jsonChildren[0]);
    if (1 < jsonChildren.length) {
      for (
        var jsxChildren = [],
          allJSXChildrenAreStrings = !0,
          jsxChildrenString = "",
          i = 0;
        i < jsonChildren.length;
        i++
      ) {
        var jsxChild = jsonChildToJSXChild(jsonChildren[i]);
        jsxChildren.push(jsxChild);
        allJSXChildrenAreStrings &&
          ("string" === typeof jsxChild
            ? (jsxChildrenString += jsxChild)
            : null !== jsxChild && (allJSXChildrenAreStrings = !1));
      }
      return allJSXChildrenAreStrings ? jsxChildrenString : jsxChildren;
    }
  }
  return null;
}
exports.unstable_toMatchRenderedOutput = function(root, expectedJSX) {
  if (0 !== root._Scheduler.unstable_clearYields().length)
    throw ReactErrorProd(Error(296));
  root = root.toJSON();
  if (null === root || "string" === typeof root) var actualJSX = root;
  else
    Array.isArray(root)
      ? 0 === root.length
        ? (actualJSX = null)
        : 1 === root.length
          ? (actualJSX = jsonChildToJSXChild(root[0]))
          : ((root = jsonChildrenToJSXChildren(root)),
            (actualJSX =
              null === root || "string" === typeof root
                ? root
                : {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: REACT_FRAGMENT_TYPE,
                    key: null,
                    ref: null,
                    props: { children: root },
                    _owner: null,
                    _store: void 0
                  }))
      : (actualJSX = jsonChildToJSXChild(root));
  return captureAssertion(function() {
    expect(actualJSX).toEqual(expectedJSX);
  });
};
